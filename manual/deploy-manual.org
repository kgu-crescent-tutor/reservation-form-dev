* デプロイ方法について
** フロント
GitHub Pages として公開したリポジトリに git push するだけ


** バックエンド
方法は 2 種類あるが, node が使える場合は方法2がおすすめ

*** 方法1
- /gas 内の *.js を "(同じ名前).gs" として GAS の web エディタにコピペ
- /gas/tests 内の *.js を "/test/s(同じ名前).gs" として GAS の web エディタにコピペ

*** 方法2
- (注意1) .clasp.json は機密情報なので, git に入れない
  - 誤って push までしてしまった場合は, 別の GAS を作成すること

- (注意2) 事前に編集した状態で pull/clone すると,
  ローカルの js ファイルがリモートのファイルで更新される
  - 事前に js ファイルを git commit しておく
  - 時間割が変更されていれば, timetable.js を add, commit しておく
  - git checkout . して clone する前に戻す

- 初回のみ
  - $ npm i -g @google/clasp
    - which clasp でインストールできたことを確認
    - うまくいかない時は npm が古いかも？
  - GAS API を有効化
    - https://script.google.com/home/usersettings で Google Apps Script API をオンにする
  - $ clasp login
  - ブラウザでログイン
  - デプロイ対象の GAS のページで, ファイル → プロジェクトのプロパティ の "スクリプト ID" をメモ
  - $ clasp clone (スクリプトID)  # 上記の注意 2 を確認 #

- デプロイ時
  - $ clasp push
    - 時間割が更新されているかもしれないことに注意 (必ずエラーになるか分かっていない)
    - web エディタで更新した場合, エラーになるので clasp pull する

*** GAS で eslint を使いたい時
- $ npm install -g eslint eslint-plugin-googleappsscript
- $ eslint *.js tests/*.js 等
  - GAS では別ファイルをまたいだ参照が可能なので, unused と undefined が出るけれど...

